spring:
  datasource:
    url: jdbc:mysql://localhost:3306/pr?useSSL=false&useUnicode=true&characterEncoding=utf-8
    username: root
    password: 123456
    driver-class-name: com.mysql.jdbc.Driver
#  redis:
#    host: localhost
#    port: 6379
#    password: 123456
#    database: 0
#    timeout: 3000ms
#    lettuce:
#      pool:
#        max-active: 8
#        max-wait: -1ms
#        max-idle: 8
#        min-idle: 0
    # Druid数据源配置
    druid:
      # 初始化大小，最小，最大
      initial-size: 5
      min-idle: 5
      max-active: 20
      # 配置获取连接等待超时的时间
      max-wait: 60000
      # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
      time-between-eviction-runs-millis: 60000
      # 配置一个连接在池中最小生存的时间，单位是毫秒
      min-evictable-idle-time-millis: 300000
      # 验证连接有效与否的SQL，不同的数据配置不同
      validation-query: SELECT 1 FROM DUAL
      test-while-idle: true
      test-on-borrow: false
      test-on-return: false
      # 打开PSCache，并且指定每个连接上PSCache的大小
      pool-prepared-statements: true
      max-pool-prepared-statement-per-connection-size: 20
      # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
      filters: stat,wall,slf4j
      # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
      connection-properties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
      # 配置DruidStatFilter
      web-stat-filter:
        enabled: true
        url-pattern: /*
        exclusions: .js,*.gif,*.jpg,*.bmp,*.png,*.css,*.ico,/druid/*
      # 配置DruidStatViewServlet
      stat-view-servlet:
        url-pattern: /druid/*
        # IP白名单(没有配置或者为空，则允许所有访问)
        #allow: 127.0.0.1
        # IP黑名单 (存在共同时，deny优先于allow)
        #deny: 192.168.1.100
        # 禁用HTML页面上的"Reset All"功能
        reset-enable: false
        # 登录名
        login-username: root
        # 登录密码
        login-password: 123456

    #JPA（Hibernate）配置
  jpa:
      open-in-view: false # 关闭 OpenSessionInView（避免事务外持有Session，防止性能问题）
      hibernate:
        ddl-auto: update # 数据库表结构自动维护策略（create:删表重建；create-drop:启动建表/关闭删表；update:增量更新；validate:校验结构；none:禁用）
      properties:
        hibernate:
          dialect: org.hibernate.dialect.MySQL8Dialect # 数据库方言（MySQL 5.x 用 MySQL5Dialect）
          format_sql: true # 格式化SQL日志（开发环境开启，生产环境关闭）
          show_sql: true # 打印SQL日志（开发环境开启，生产环境关闭）
      database-platform: org.hibernate.dialect.MySQL8Dialect # 显式指定数据库平台（避免自动识别错误）
# MyBatis-Plus配置
mybatis-plus:
  # XML映射文件位置
  mapper-locations: classpath:mapper/*.xml
  # 实体类包路径（用于别名）
  type-aliases-package: com.cb.mapper
  configuration:
    # 驼峰命名映射（数据库ip_address -> 实体类ipAddress）
    map-underscore-to-camel-case: true
    # 打印SQL日志（开发环境用）
    log-impl: org.apache.ibatis.logging.stdout.StdOutImpl
#OpenAPI 文档生成相关配置
springdoc:
  api-docs:
    enabled: true                # 启用或禁用 OpenAPI 文档生成
    path: /v3/api-docs           # 文档的路径，默认是 /v3/api-docs
  swagger-ui:
    enabled: true                # 启用 Swagger UI 页面
    path: /swagger-ui.html       # UI 访问路径（默认）
    title: 采报接口文档
    display-request-duration: true       # 显示请求耗时
    doc-expansion: none                  # none | list | full
    operations-sorter: alpha             # 排序方式：method(按照HTTP方法排序)、alpha(按照字符排序)
    tags-sorter: alpha                   # 标签排序
    default-model-expand-depth: 2        # 控制左侧 Models（底部模型结构）面板默认展开的层级
    default-models-expand-depth: 1		 # 控制接口每个请求/响应体中模型字段的默认展开层级
    try-it-out-enabled: true             # 是否启用 Try it out 按钮
#  group-configs:                         # 分组配置（适合多模块项目）
#    - group: 示例模块              # 命名模块
#      paths-to-match: /Test/**   # 指定哪些 URL 路径下的接口会被包含进这个分组。
#      packages-to-scan: com.cb.controller.ExampleController # 指定扫描哪个包下的 Controller 类，用于生成接口文档。
server:
  port: 8080